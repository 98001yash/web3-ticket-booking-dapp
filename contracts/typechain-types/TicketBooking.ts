/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TicketBooking {
  export type EventDataStruct = {
    name: string;
    date: BigNumberish;
    price: BigNumberish;
    ticketCount: BigNumberish;
    ticketsSold: BigNumberish;
    organizer: AddressLike;
  };

  export type EventDataStructOutput = [
    name: string,
    date: bigint,
    price: bigint,
    ticketCount: bigint,
    ticketsSold: bigint,
    organizer: string
  ] & {
    name: string;
    date: bigint;
    price: bigint;
    ticketCount: bigint;
    ticketsSold: bigint;
    organizer: string;
  };
}

export interface TicketBookingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTicket"
      | "createEvent"
      | "events"
      | "getEventData"
      | "nextEventId"
      | "ticketsOwned"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EventCreated" | "TicketPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextEventId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsOwned",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    name: string,
    date: BigNumberish,
    price: BigNumberish,
    ticketCount: BigNumberish,
    organizer: AddressLike
  ];
  export type OutputTuple = [
    eventId: bigint,
    name: string,
    date: bigint,
    price: bigint,
    ticketCount: bigint,
    organizer: string
  ];
  export interface OutputObject {
    eventId: bigint;
    name: string;
    date: bigint;
    price: bigint;
    ticketCount: bigint;
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    buyer: AddressLike,
    quantity: BigNumberish
  ];
  export type OutputTuple = [eventId: bigint, buyer: string, quantity: bigint];
  export interface OutputObject {
    eventId: bigint;
    buyer: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TicketBooking extends BaseContract {
  connect(runner?: ContractRunner | null): TicketBooking;
  waitForDeployment(): Promise<this>;

  interface: TicketBookingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTicket: TypedContractMethod<
    [eventId: BigNumberish, quantity: BigNumberish],
    [void],
    "payable"
  >;

  createEvent: TypedContractMethod<
    [
      name: string,
      date: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string] & {
        name: string;
        date: bigint;
        price: bigint;
        ticketCount: bigint;
        ticketsSold: bigint;
        organizer: string;
      }
    ],
    "view"
  >;

  getEventData: TypedContractMethod<
    [eventId: BigNumberish],
    [TicketBooking.EventDataStructOutput],
    "view"
  >;

  nextEventId: TypedContractMethod<[], [bigint], "view">;

  ticketsOwned: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [eventId: BigNumberish, quantity: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      name: string,
      date: BigNumberish,
      price: BigNumberish,
      ticketCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, string] & {
        name: string;
        date: bigint;
        price: bigint;
        ticketCount: bigint;
        ticketsSold: bigint;
        organizer: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventData"
  ): TypedContractMethod<
    [eventId: BigNumberish],
    [TicketBooking.EventDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextEventId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketsOwned"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[eventId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,string,uint256,uint256,uint256,address)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "TicketPurchased(uint256,address,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
  };
}
